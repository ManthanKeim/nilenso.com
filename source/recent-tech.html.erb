---
title: Techincal details of recent projects
---
<div class="bordered-section">
  <h2 class="section-heading">Techincal details of recent projects</h2>

  <div class="section-content">
    Some of the major services we've built (and owned in production) include a multivariate testing/experimentation plaform, multiple machine learning runtimes, and a variety of ETL and analytics systems. Most of these systems are written in Clojure but we also have Javascript (node.js) and Haskell in production.
  </div>

  <p class="section-content">
    <strong>Experimentation Platform:</strong> This is easily the largest system nilenso has built and owned. With a two-year lifespan thus far, EP supports a <10ms 99.9 percentile SLA and over 300k requests per second as a backend service to a large e-commerce company. The system involved significant research and the incorporation of work done by Google, Netflix, and Microsoft (released as white papers), tuning a large and fast-moving Postgres runtime database as well as a sizeable reporting database. Distribution and failover were a major concern from the beginning, and the service instances have withheld substantial changes in load on occasions such as Black Friday and "Cyber Monday". Additional snapshotting and redundancy for the system is built on top of ZFS.

 We've given a presentation on EP's architecture: <a href="https://youtu.be/YjfXhhxw9Bs">https://youtu.be/YjfXhhxw9Bs </a>
																		    </p>

  <p class="section-content">
    <strong>Machine Learning runtimes:</strong> These systems have evolved a great deal since we began working on them. Initially, they were built on top of an HBase reporting backend using an internal distributed parallelization framework and inter-process communication was primarily managed with RabbitMQ. These days, the reporting is done off of AWS Redshift and most systems communicate via internal REST APIs or Kafka, where appropriate. The external APIs are exposed over Google protocol buffers for serialization efficiency and because they make more sense as strictly-schema'd RPC-style APIs than representational APIs. Part of this work was picking apart the client's original machine learning monolith, another significant portion was coming up with a generative testing harness and framework (QAs write selenium tests, the development team uses Causatum+Simulant+Datomic). Most of the development was on runtimes, not algorithms, but for the recommendations engine (email marketing for existing customers) we did implement Multi-armed Bandit. Performance and load testing was an ongoing activity for all of these services, though some of the load testing drive was written in bare Java rather than Clojure, to maintain control of garbage collection (primarily for histograms of load).
  </p>
  <p class="section-content">
    <strong>ETL, data warehousing, and analytics:</strong> Transformation of streaming events into an OLAP db was done on three projects: for e-commerce (session, purchase, clickstream data), media (clickstream and mutative events), and an events management company (financial data, clickstream). The first two were done in Clojure and Haskell, the last in node.js. These systems were variously about transforming disparate data into a single schema, rendering realtime analytics dashboards, and providing notifications to business users around key metrics.
  </p>
  <p class="section-content">
    <strong>Web crawler/scraper:</strong> A system which would routinely analyze an unstructured dataset on the web to correlate data from internal systems with external. This project employed a great deal of error-handling, distribution of the agents performing the crawling, and intelligent HTML parsing.
  </p>
  <p class="section-content">
    <strong>Monitoring:</strong> We've recently begun working on a complete monitoring solution (quite overdue) for the e-commerce service architectures we help support. System-level events and application events are both centrally collected in an on-box service running adjacent to runtime services then queried periodically into Prometheus to provide intelligent alerting to developers doing operations and diagnostics tools in the case of runtime failure.
  </p>
  <p class="section-content">
    We have a number of older projects we've delivered as well, in a variety of technologies. But these are the key projects from the past year. It's also worth mentioning that we manage all our own servers, infrastructure, testing, and deployments... it's a bit difficult to capture everything we do there under one bullet point, however.
  </p>
  <p class="section-content">
    If you are interested in some of the other talks we've given at conferences in the past few years, you can look through our <a href="https://www.youtube.com/c/nilenso/videos">YouTube channel</a>. These cover Clojure, Haskell, Ruby, data science, concurrency, resilient service architectures, programmatic music synthesis, our employee-owned business model, and meditation. :)
  </p>
</div>
